////msg.author.id === `576824908093325335`

// require the discord.js module
const Discord = require('discord.js');

// create a new Discord client & init config file
const { prefix, token } = require('./config.json');
const client = new Discord.Client();
const { Users, CurrencyShop } = require('./dbObjects');
const { Op } = require('sequelize');
const currency = new Discord.Collection();
const PREFIX = '~';

////add coins
 Reflect.defineProperty(currency, 'add', {
 	/* eslint-disable-next-line func-name-matching */
 	value: async function add(id, amount) {
 		const user = currency.get(id);
 		if (user) {
 			user.balance += Number(amount);
 			return user.save();
 		}
 		const newUser = await Users.create({ user_id: id, balance: amount });
 		currency.set(id, newUser);
 		return newUser;
 	},
 });

////show balance
 Reflect.defineProperty(currency, 'getBalance', {
 	/* eslint-disable-next-line func-name-matching */
 	value: function getBalance(id) {
 		const user = currency.get(id);
 		return user ? user.balance : 0;
 	},
 });

 // when the client is ready, run this code
 // this event will only trigger one time after logging in
 client.once('ready', async () => {
 	const storedBalances = await Users.findAll();
 	storedBalances.forEach(b => currency.set(b.user_id, b));
 	console.log(`Logged in as ${client.user.tag}!`);
 });

/////////////////////////////////////////////////////to edit
 client.on('message', async message => {
 	if (message.author.bot) return;
 	currency.add(message.author.id, 1);

 	if (!message.content.startsWith(PREFIX)) return;
 	const input = message.content.slice(PREFIX.length).trim();
 	if (!input.length) return;
 	const [, command, commandArgs] = input.match(/(\w+)\s*([\s\S]*)/);

 	if (command === 'balance') {
 		const target = message.mentions.users.first() || message.author;
 		return message.channel.send(`${target.tag} has ${currency.getBalance(target.id)}ðŸ’°`);
 	} else if (command === 'inventory') {
 		const target = message.mentions.users.first() || message.author;
 		const user = await Users.findOne({ where: { user_id: target.id } });
 		const items = await user.getItems();

 		if (!items.length) return message.channel.send(`${target.tag} has nothing!`);
 		return message.channel.send(`${target.tag} currently has ${items.map(t => `${t.amount} ${t.item.name}`).join(', ')}`);
 	} else if (command === 'transfer') {
 		const currentAmount = currency.getBalance(message.author.id);
 		const transferAmount = commandArgs.split(/ +/).find(arg => !/<@!?\d+>/.test(arg));
 		const transferTarget = message.mentions.users.first();

 		if (!transferAmount || isNaN(transferAmount)) return message.channel.send(`Sorry ${message.author}, that's an invalid amount`);
 		if (transferAmount > currentAmount) return message.channel.send(`Sorry ${message.author} you don't have that much.`);
 		if (transferAmount <= 0) return message.channel.send(`Please enter an amount greater than zero, ${message.author}`);

 		currency.add(message.author.id, -transferAmount);
 		currency.add(transferTarget.id, transferAmount);

 		return message.channel.send(`Successfully transferred ${transferAmount}ðŸ’° to ${transferTarget.tag}. Your current balance is ${currency.getBalance(message.author.id)}ðŸ’°`);
 	} else if (command === 'buy') {
 		const item = await CurrencyShop.findOne({ where: { name: { [Op.like]: commandArgs } } });
 		if (!item) return message.channel.send('That item doesn\'t exist.');
 		if (item.cost > currency.getBalance(message.author.id)) {
 			return message.channel.send(`You don't have enough currency, ${message.author}`);
 		}

 		const user = await Users.findOne({ where: { user_id: message.author.id } });
 		currency.add(message.author.id, -item.cost);
 		await user.addItem(item);

 		message.channel.send(`You've bought a ${item.name}`);
 	} else if (command === 'shop') {
 		const items = await CurrencyShop.findAll();
 		return message.channel.send(items.map(i => `${i.name}: ${i.cost}ðŸ’°`).join('\n'), { code: true });
 	} else if (command === 'leaderboard') {
 		return message.channel.send(
 			currency.sort((a, b) => b.balance - a.balance)
 				.filter(user => client.users.cache.has(user.user_id))
 				.first(10)
 				.map((user, position) => `(${position + 1}) ${(client.users.cache.get(user.user_id).tag)}: ${user.balance}ðŸ’°`)
 				.join('\n'),
 			{ code: true },
 		);
 	}
 });






//listen for messages (in this case, listen for pings)
client.on('message', msg => {
 var mes = msg.content.toLowerCase();
 if (mes === `${prefix}help`) {
 //reply with pong to the user who sent the ping
 msg.channel.send('List of commands: \n ~ping \n mima/mima bot/mima-bot/mima sama \n ~pengu \n bad bot');
 }
 });

//listen for messages (in this case, listen for pings)
client.on('message', msg => {
 var mes = msg.content.toLowerCase();
 if (mes === `${prefix}ping`) {
 //reply with pong to the user who sent the ping
 msg.channel.send('Pong!:ping_pong:');
 }
 });

//listen for messages (in this case, listen for mima)
client.on('message', msg => {
 var mes = msg.content.toLowerCase();
 if (mes === 'mima' || mes === "mima bot" || mes === 'mima-bot' || mes === 'mima sama' || mes === 'mima-sama') {
 //reply with msg to the user who mentioned the bot
 msg.reply('I\'m here! <:mimadonut:856559759888351262>');
 }
 });

//listen for messages (in this case, listen for pengu)
client.on('message', msg => {
 var mes = msg.content.toLowerCase();
 if (mes === `${prefix}pengu`) {
 //reply with msg to the user who sent the ping
 msg.channel.send(`Largest poop hole in ${msg.guild.region}<:mimadonut:856559759888351262>`);
 }
 });
//listen for messages (in this case, listen for bad bot)
client.on('message', msg => {
 var mes = msg.content.toLowerCase();
 if (mes === 'bad bot') {
 //reply with msg to the user who sent the ping
 msg.channel.send(`Say that to my face ${msg.author} and see what happends<:mimadonut:856559759888351262>`);
 }
 });
//listen for messages (in this case, listen for good bot)
client.on('message', msg => {
 var mes = msg.content.toLowerCase();
 if (mes === 'good bot') {
 //reply with msg to the user who sent the ping
 msg.channel.send(`https://media.discordapp.net/attachments/523518398102241280/807011772439199775/mima1.gif`);
 }
 });

//listen for messages (in this case, listen for pings)
client.on('message', msg => {
 var mes = msg.content.toLowerCase();
 if (mes === `ded`) {
 //reply with pong to the user who sent the ping
 msg.channel.send(`<:sakuyaded:856558299326971944>`);
 }
 });

//login to Discord with your app's token
client.login('ODU2NjMyNjg0NjMzNTIyMTg3.YND3Ww.sV914QH8aaoQ3W06GGkasNOeIqU');
